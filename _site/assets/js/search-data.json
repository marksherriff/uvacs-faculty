{"0": {
    "doc": "Department Bylaws",
    "title": "UVA CS Department Bylaws",
    "content": ". | 1. Mission of the Department | 2. Organization of the Department . | 2.1 Composition of the Faculty | 2.1.1 Regular Faculty | 2.1.1.1 Tenured/Tenure-Track Faculty (TTTF) | 2.1.1.2 Academic General Faculty: AGF | 2.1.2 Non-regular Faculty . | Visiting Professors | Courtesy Professors | Adjunct Faculty | Emeritus Professor | . | 2.2 Voting Faculty | 2.3 Professional Research Staff | . | 3. Administration . | 3.1 Chair | 3.1.1 Chair Duties | 3.2 Associate Chair | 3.2.1 Appointment and Term | 3.2.2 Duties | 3.3 Committees | 3.3.1 Computer Science Graduate Program Committee | 3.3.2 Computer Science Graduate Admissions Committee | 3.3.3 Computer Science Undergraduate Curriculum Committee | 3.3.4 Computer Systems Committee | 3.3.5 Diversity, Equity, and Inclusion Committee | 3.3.6 Peer Review Committee | 3.3.7 Space and Infrastructure Committee | 3.3.8 CS Promotion and Tenure Subcommittee | 3.3.9 Other Standing Committees | 3.3.9 Ad Hoc Committees | . | 4. Faculty Meetings . | 4.1 Schedule of Faculty Meetings | 4.2 Agenda | 4.3 Minutes | 4.4 Voting and Proxies | . | 5. Communications and Notice | 6. Appointments, Promotions and Reappointments . | 6.1.1 Chair Appointment | 6.1.2 Associate Chair Appointment | 6.1.3 Tenure-Track and Academic-General-Faculty Appointments | 6.1.4 Courtesy Faculty Appointments | 6.1.5 Joint Appointments | 6.1.6 Professional Research Staff Appointments | . | 6.2 Promotion, Reappointments and Tenure . | 6.2.1 Chair Reappointment | 6.2.2 Tenure/Tenure-Track and Academic General Faculty Promotion, Reappointments and Tenure | . | 7. Adoption . | 7.1 Amendments | . | . Effective Date: May 9, 2022 . ",
    "url": "/bylaws.html#uva-cs-department-bylaws",
    
    "relUrl": "/bylaws.html#uva-cs-department-bylaws"
  },"1": {
    "doc": "Department Bylaws",
    "title": "Introduction",
    "content": "This document describes the Bylaws by which the Department of Computer Science (CS) of the University of Virginia operates to achieve its mission. The CS Department has a valued history of operating and achieving its mission in a cooperative and collegial atmosphere. This atmosphere is based on respect for each individual and efforts to maintain an environment where issues and differences are discussed and resolved in a constructive and collaborative manner. The policies and procedures set forth herein are intended to preserve and protect this operating style. This document refers to School policies, which are listed at https://engineering.virginia.edu/faculty-staff/uva-engineering-policies-procedures; and University policies, which are listed at https://uvapolicy.virginia.edu/ and referred to by policy identifier. This update reflects changes to address new policies on Academic General Faculty (AGF), specifically SEAS Policy 2017.4 relating to AGF, as well as increased use of secondary and courtesy appointments (see SEAS policy 2017.6, Promotion and Tenure Policy for Tenured and Tenure Track Faculty), and to clarify voting prerogatives for faculty with secondary appointments. ",
    "url": "/bylaws.html#introduction",
    
    "relUrl": "/bylaws.html#introduction"
  },"2": {
    "doc": "Department Bylaws",
    "title": "1. Mission of the Department",
    "content": "The mission of the department is to . | Serve as world-class educators to both our graduate and undergraduate students by providing a deep understanding of the fundamentals of computer science and engineering, and applying those concepts to real-world problems; | Pursue bold and innovative research that will impact the problems of a global society; | Provide visionary leadership to our professional discipline; | Create an intellectual, collaborative, and collegial community that embraces diversity, equity, and inclusion and welcomes collaboration with other disciplines; | Engage in service and outreach to enrich the community, state, and profession; and | Establish viable corporate and external partnerships to help identify problems and solutions and transfer of knowledge. | . ",
    "url": "/bylaws.html#1-mission-of-the-department",
    
    "relUrl": "/bylaws.html#1-mission-of-the-department"
  },"3": {
    "doc": "Department Bylaws",
    "title": "2. Organization of the Department",
    "content": "For the purposes of this document, “The Department” shall consist of all faculty members, staff, and research professionals. The term “Chair” shall refer to the chair of the department unless discussing a committee, when it shall refer to the chair of that committee. The term “Dean” shall refer to the Dean of the School Engineering and Applied Sciences. The term “University” shall refer to the University of Virginia. ",
    "url": "/bylaws.html#2-organization-of-the-department",
    
    "relUrl": "/bylaws.html#2-organization-of-the-department"
  },"4": {
    "doc": "Department Bylaws",
    "title": "2.1 Composition of the Faculty",
    "content": " ",
    "url": "/bylaws.html#21-composition-of-the-faculty",
    
    "relUrl": "/bylaws.html#21-composition-of-the-faculty"
  },"5": {
    "doc": "Department Bylaws",
    "title": "2.1.1\tRegular Faculty",
    "content": "All faculty are full citizens of the Department and have interest and equal voice in all academic issues. Thus, the regular faculty of the Department consists of the tenure/tenure track and AGF faculty. ",
    "url": "/bylaws.html#211-regular-faculty",
    
    "relUrl": "/bylaws.html#211-regular-faculty"
  },"6": {
    "doc": "Department Bylaws",
    "title": "2.1.1.1 Tenured/Tenure-Track Faculty (TTTF)",
    "content": "The tenured/tenure track faculty (TTTF) of the Department hold the positions of Professor of Computer Science, Associate Professor of Computer Science, and Assistant Professor of Computer Science. The position of Associate Professor or Professor may be tenured or may be fixed-term and untenured. The position of Assistant Professor is fixed-term and untenured. A faculty member may have a joint appointment in the Department of Computer Science with other departments, typically with one department acting as the primary department (appointment &gt; 50%) and the others as secondary departments (appointment &lt; 50%). The funding and responsibilities are shared among the departments. The title of a joint faculty member follows from the primary department. Joint appointments shall be for a term of three years unless specified otherwise, and can be renewed. The Department shall maintain a policy governing joint appointments, which shall be in compliance with University-level policies. These appointments are governed by University policy PROV-029 and any subsequent modifications or successor policies. ",
    "url": "/bylaws.html#2111-tenuredtenure-track-faculty-tttf",
    
    "relUrl": "/bylaws.html#2111-tenuredtenure-track-faculty-tttf"
  },"7": {
    "doc": "Department Bylaws",
    "title": "2.1.1.2 Academic General Faculty: AGF",
    "content": "The Academic General Faculty (AGF) hold the positions of Professor of Computer Science, Associate Professor of Computer Science, Assistant Professor of Computer Science, Distinguished Lecturer, Senior Lecturer, and Lecturer. The formal faculty title for the professorial ranks will specify both their rank and their membership in the General Faculty (e.g., Assistant Professor, General Faculty). Positions in this category customarily require teaching, educational and/or disciplinary scholarship, and service, in various combinations, as principal activities. These positions are tenure-ineligible and are fixed-term, renewable appointments, and are governed by University policy PROV-004 and School-level policies. The reappointment or continued employment of AGF whose salaries are funded from grants, contracts or private gifts is subject to the continued availability of such funds. A General Faculty member may have a joint appointment in the Department of Computer Science with other departments, with one department acting as the primary department and the others as secondary departments. The funding and responsibilities are shared among the departments. The title of a joint faculty member follows from the primary department. Joint appointments shall be for a term of three years unless specified otherwise, and can be renewed. The Department shall maintain a policy governing joint appointments, which shall be in compliance with University-level policies. These appointments are governed by University policy PROV-004 and SEAS policies SEAS 2017.4 and 2017.7, and any subsequent modifications or successor policies. ",
    "url": "/bylaws.html#2112-academic-general-faculty-agf",
    
    "relUrl": "/bylaws.html#2112-academic-general-faculty-agf"
  },"8": {
    "doc": "Department Bylaws",
    "title": "2.1.2 Non-regular Faculty",
    "content": "The non-regular faculty of the Department consists of faculty who participate substantially in the programs of the Department and hold positions of Visiting Professor, Affiliated Professor and Emeritus Professor. Visiting Professors . Visiting Professors are scholars from another institution, and their titles follow from their home institution, or in the case of Visitors from non-academic institutions, are given a title commensurate with their experience, with the approval of the CS tenure-track faculty and the Dean. Visiting Professors are expected to teach, lecture, or perform research on a topic for which they are an expert, and generally expected to play an active role in the Department. The appointments are for terms of one or two years and can only be renewed beyond two years with permission from the Provost. Visiting appointments are governed by University policy PROV-013. Courtesy Professors . Courtesy faculty have home departments within the University other than Computer Science, and such appointments are governed by University Policy PROV-029. They carry their rank from their primary department, and shall indicate their courtesy appointment in Computer Science with the phrase “(by courtesy)”. There are no formal responsibilities or rights attached to these faculty; however, courtesy faculty are expected to play an active role in the department. Specific rights may be granted according to a vote of the Computer Science faculty. Courtesy status is granted for up to three years and is renewable. In addition to reappointment reviews, these appointments must be reviewed by the Computer Science Department at times of a Courtesy faculty member’s promotion in their home department. The purpose of these reviews is to evaluate the suitability of continuing appointment in Computer Science. Adjunct Faculty . The Department may, from time to time, employ faculty on a part-time or wage basis, to teach specific courses. Adjunct faculty typically carry the title of Lecturer. There are no formal responsibilities or rights attached to these faculty, other than those related to their teaching duties; however, with approval of the chair and the CS Undergraduate Curriculum Committee, Adjunct Faculty may advise undergraduate research, e.g., senior theses, capstone projects, and independent studies. Additional rights may be granted according to a vote of the Computer Science Faculty. Adjunct faculty are referred to as “faculty wage employees” in University policy and are governed by University policy PROV-026. Emeritus Professor . The Emeritus Professors hold titles of Professor Emeritus or Associate Professor Emeritus, which are conferred upon retiring faculty, following nominations made to the UVA Board of Visitors. Recommendation of Emeritus status requires a vote of the Computer Science Faculty. These appointments are governed by University policy PROV-018 and SEAS policy 2016.2. ",
    "url": "/bylaws.html#212-non-regular-faculty",
    
    "relUrl": "/bylaws.html#212-non-regular-faculty"
  },"9": {
    "doc": "Department Bylaws",
    "title": "2.2 Voting Faculty",
    "content": "Regular members of the faculty may vote on all issues, subject to restrictions outlined elsewhere in this document or in a School- or University-level policy; for example, voting on promotion and tenure cases is restricted, as noted in Section 6.2. Other individuals may be given voting privileges on specific issues by a two-third majority vote of the voting faculty at a faculty meeting called for that purpose. ",
    "url": "/bylaws.html#22-voting-faculty",
    
    "relUrl": "/bylaws.html#22-voting-faculty"
  },"10": {
    "doc": "Department Bylaws",
    "title": "2.3 Professional Research Staff",
    "content": "The Professional Research Staff consists of research scientists and associates whose responsibility is research under the direction of a faculty member. Professional Research Staff hold the positions of Postdoctoral Research Associate, Research Scientist, Senior Scientist, and Principal Scientist. These positions are term appointments and rely on external funding, and renewal is contingent upon funding. These appointments are governed by University policy HRM-033. ",
    "url": "/bylaws.html#23-professional-research-staff",
    
    "relUrl": "/bylaws.html#23-professional-research-staff"
  },"11": {
    "doc": "Department Bylaws",
    "title": "3. Administration",
    "content": " ",
    "url": "/bylaws.html#3-administration",
    
    "relUrl": "/bylaws.html#3-administration"
  },"12": {
    "doc": "Department Bylaws",
    "title": "3.1 Chair",
    "content": "The Chair is the chief administrative officer of the Department. Responsibilities of the Chair include providing leadership to the Department in achieving its mission, administering the policies and procedures of the Department, School and University, and acting as the primary representative and advocate of the Department within the institution and the profession. ",
    "url": "/bylaws.html#31-chair",
    
    "relUrl": "/bylaws.html#31-chair"
  },"13": {
    "doc": "Department Bylaws",
    "title": "3.1.1 Chair Duties",
    "content": "The Chair is the official link between the Department and the administration of the University, other computer science departments around the world, the computer industry, and the general public. As a link to the administration, the Chair presents departmental needs, objectives, and evaluations of achievement to the Dean, and keeps colleagues informed of future plans and University policy. Specific duties of the Chair include the following, and are also governed by policies at https://engineering.virginia.edu/faculty-staff/uva-engineering-policies-procedures . The Chair: . | has the responsibility for, and presents, an annual budget to the Department and Dean, and oversees the use of departmental funds and resources, including those from the Computer Services Recharge Center (CSRC). | serves as a mentor for all faculty and should meet with each regular faculty member at least once a year. | serves as an ex-officio member of all committees. | is responsible for selecting one or more Associate Chairs, if desired. | in consultation with the Associate Chair(s) and chairs of committees, is responsible for student advising, scheduling of courses, teaching assignments, and teaching loads. | appoints and charges all departmental committees, agreeable to the policies in article 3.3 of these bylaws. In the case of faculty peer-evaluation committees, the Chair consults with the Dean about members. | or their designee(s) from the CS Promotion &amp; Tenure Subcommittee (described below), is responsible for writing departmental recommendations concerning appointment, promotion, renewal, and termination of faculty members to the Dean, who in turn writes the official letters on these matters. If faculty opinion in these matters is substantially divided, the Chair presents summaries of all pertinent arguments to the Dean. | writes an evaluation of each faculty member after receiving the evaluations from the Peer Review Committee. | or their faculty designee, must approve all TA assignments. | or their designee, must approve all grant budgets, without exception. | or their faculty designee, recommends sabbatical leaves and personal leaves. | makes recommendations to the Dean regarding faculty and staff hires, in accordance with University policies, and in conjunction with the Dean’s Office, negotiates offer terms. | determines salary adjustments and compensation for each faculty member, in accordance with School and University policies. | has hiring and supervisory authority over all departmental staff. | in consultation with the Space and Infrastructure Committee, allocates office and lab space to faculty, staff, and students; and enforces rules and procedures governing space. | or their designee(s) is/are responsible for establishing connections with industry and fundraising. | . ",
    "url": "/bylaws.html#311-chair-duties",
    
    "relUrl": "/bylaws.html#311-chair-duties"
  },"14": {
    "doc": "Department Bylaws",
    "title": "3.2 Associate Chair",
    "content": "The office of Associate Chair is not required by the policies of SEAS. However, if the Chair wishes to reduce the administrative burden of the office, one or more Associate Chairs may be solicited and appointed from the faculty. ",
    "url": "/bylaws.html#32-associate-chair",
    
    "relUrl": "/bylaws.html#32-associate-chair"
  },"15": {
    "doc": "Department Bylaws",
    "title": "3.2.1 Appointment and Term",
    "content": "Appointment of an Associate Chair is made by the Chair. The term of office is normally three or four years and is renewable. If the appointee has a term appointment, the appointment of Associate Chair cannot extend beyond the end of a faculty member’s term appointment. Nor will the term extend beyond that of the Chair’s, although an incoming chair may choose to extend the Associate Chair’s term. ",
    "url": "/bylaws.html#321-appointment-and-term",
    
    "relUrl": "/bylaws.html#321-appointment-and-term"
  },"16": {
    "doc": "Department Bylaws",
    "title": "3.2.2 Duties",
    "content": "The Associate Chair(s) perform duties delegated by the Chair, such as the following: . | serving as the Acting Chair at meetings and functions when the Chair is unable to attend, including School- and University-Level functions, | functioning as Acting Chair when the Chair is not accessible for an extended period of time, unless other arrangements are made, | serving as program director for one or more educational programs serving in other administrative roles, e.g., course scheduler, open house coordinator, etc. | . ",
    "url": "/bylaws.html#322-duties",
    
    "relUrl": "/bylaws.html#322-duties"
  },"17": {
    "doc": "Department Bylaws",
    "title": "3.3 Committees",
    "content": "Committees handle work delegated by the Department Chair and serve as an important forum for ideas to be developed before presentation to the full faculty for further discussion. Each committee has a committee chair, who acts as the Chair’s designee for preparing agendas, calling meetings, keeping minutes, and making recommendations or acting based on committee decisions. Committee membership and charges are assigned by the Chair, except for responsibilities outlined below. All committees, whether standing or ad hoc, must have a documented charge. Voting, when needed, shall follow the same rules for quorum and/or majority as described in Section 4.4 on Voting and Proxies. Ex-officio committee members, including the department Chair, do not count as part of the quorum for committee votes unless they cast a vote. The committee chair and committee members are appointed annually by the Department Chair. The standing committees of the Department at a minimum shall include those listed below, and their standing responsibilities shall be outlined in a Policy on Departmental Committees (PDC). Short-term responsibilities may be added by the chair and should be documented in a written announcement to the faculty. ",
    "url": "/bylaws.html#33-committees",
    
    "relUrl": "/bylaws.html#33-committees"
  },"18": {
    "doc": "Department Bylaws",
    "title": "3.3.1 Computer Science Graduate Program Committee",
    "content": "The Graduate Program Committee is responsible for supervising academic progress of current graduate students, and the policies and operations of the graduate program. The members of the Graduate Program Committee should ideally reflect different research areas and seniorities within the Department. The Chair of the Committee should be a faculty member who is active in advising Ph.D. students. There is also a Graduate Committee for the Computer Engineering Program (CpE), administered by CpE, on which two CS faculty members serve. If possible, one of these two members of the CpE Graduate Committee also serves on the CS Graduate Program Committee. ",
    "url": "/bylaws.html#331-computer-science-graduate-program-committee",
    
    "relUrl": "/bylaws.html#331-computer-science-graduate-program-committee"
  },"19": {
    "doc": "Department Bylaws",
    "title": "3.3.2 Computer Science Graduate Admissions Committee",
    "content": "The Graduate Admissions Committee is responsible for ensuring the high quality of the newly arriving graduate student body. The members of this Committee and the Committee Chair should ideally reflect different research areas of the Department. Responsibilities of the Graduate Admissions Committee include the recruitment, evaluation, and recommendations to the Chair for admission of graduate students. Specific policies and procedures for admissions should be described in the PDC. ",
    "url": "/bylaws.html#332-computer-science-graduate-admissions-committee",
    
    "relUrl": "/bylaws.html#332-computer-science-graduate-admissions-committee"
  },"20": {
    "doc": "Department Bylaws",
    "title": "3.3.3 Computer Science Undergraduate Curriculum Committee",
    "content": "The Undergraduate Curriculum Committee (UCC) is responsible for reviewing and ensuring the quality of the computer science undergraduate programs offered by the Department, and for recommendations to the full faculty regarding any new undergraduate academic programs. Specific responsibilities, and roles relative to individual degree program committees, should be described in the PDC. Each undergraduate major offered by the Department is overseen by a degree program committee. Each degree program committee is responsible for reviewing and ensuring the quality of that degree program, and for recommendations to the UCC and full faculty regarding any significant changes in that program, such as degree requirements. Each degree program committee shall act in the place of the full faculty for approving student petitions for exceptions to degree requirements in that program. The current degree program committees are: . The Bachelor of Arts in Computer Science (BACS) degree is offered by the College of Arts and Sciences. The BACS Undergraduate Committee is composed of faculty from the College of Arts and Sciences and the Department of Computer Science, and is chaired by a Director of Undergraduate Program. The committee members and Director are jointly appointed by the CS Department Chair and the Dean of the College of Arts and Sciences. The Bachelor of Science in Computer Engineering (BSCpE) degree is offered by the School of Engineering and Applied Science. The BSCpE Undergraduate Committee is composed of faculty from the Department of Computer Science and the Department of Electrical and Computer Engineering, and is chaired by a Director of Undergraduate Program or their designee. The committee members and committee chair are jointly appointed by the CS Department Chair and the ECE Department Chair. The Bachelor of Science in Computer Science (BSCS) degree is offered by the School of Engineering and Applied Science. The BSCS Undergraduate Committee is composed of faculty from the Department of Computer Science, and is chaired by a Director of Undergraduate Program. The committee members and Director are appointed by the CS Department Chair. The BSCS, BACS, and CpE committees should coordinate closely with the UCC, especially on issues that concern courses that are parts of multiple degree programs. To ensure strong coordination, the membership of the UCC should include members of the BSCS, BACS, and CpE committees. ",
    "url": "/bylaws.html#333-computer-science-undergraduate-curriculum-committee",
    
    "relUrl": "/bylaws.html#333-computer-science-undergraduate-curriculum-committee"
  },"21": {
    "doc": "Department Bylaws",
    "title": "3.3.4 Computer Systems Committee",
    "content": "The Computer Systems Committee advises the Chair on issues related to the Department’s computing equipment, computing services, and systems administration staff. The Chair of the Committee, along with the Department Chair, supervises the staff responsible for system administration. As an exception to the usual rules of voting membership, the staff member in charge of system administration is a voting member of this Committee. ",
    "url": "/bylaws.html#334-computer-systems-committee",
    
    "relUrl": "/bylaws.html#334-computer-systems-committee"
  },"22": {
    "doc": "Department Bylaws",
    "title": "3.3.5 Diversity, Equity, and Inclusion Committee",
    "content": "The Diversity, Equity, and Inclusion Committee is charged with determining and implementing best practices to create an educational, intellectual and research environment strengthened by the participation of a diversity of individuals who congregate, interact and collaborate to learn and advance knowledge without barriers. ",
    "url": "/bylaws.html#335-diversity-equity-and-inclusion-committee",
    
    "relUrl": "/bylaws.html#335-diversity-equity-and-inclusion-committee"
  },"23": {
    "doc": "Department Bylaws",
    "title": "3.3.6 Peer Review Committee",
    "content": "The Peer Review Committee evaluates the annual performance of each faculty member. The Committee is composed of at least two faculty members from the Department of Computer Science and one faculty member from another department. Policies governing formation and responsibilities of this committee are described by SEAS policy 2013.4, and any rubrics or other policies pertaining to peer review can be found at: https://engineering.virginia.edu/faculty-staff/uva-engineering-policies-procedures . ",
    "url": "/bylaws.html#336-peer-review-committee",
    
    "relUrl": "/bylaws.html#336-peer-review-committee"
  },"24": {
    "doc": "Department Bylaws",
    "title": "3.3.7 Space and Infrastructure Committee",
    "content": "The Department’s Space and Infrastructure Committee advises the Chair concerning policies for: lab space allocation; faculty and staff office allocation; student seating; appropriate shared resources as part of the departmental research infrastructure, and any other topics as may be outlined in the PDC. As an exception to the usual rules of voting membership, the CS staff member in charge of facilities is a voting member of this Committee. ",
    "url": "/bylaws.html#337-space-and-infrastructure-committee",
    
    "relUrl": "/bylaws.html#337-space-and-infrastructure-committee"
  },"25": {
    "doc": "Department Bylaws",
    "title": "3.3.8 CS Promotion and Tenure Subcommittee",
    "content": "The Department’s P&amp;T Subcommittee provides the Department Chair and all tenured faculty members with a higher rank than the candidate (i.e., the full Departmental Promotion and Tenure Committee) a written evaluation of the performance of the candidate being considered for reappointment, promotion, and tenure. See Section 6.2.2 for further details. ",
    "url": "/bylaws.html#338-cs-promotion-and-tenure-subcommittee",
    
    "relUrl": "/bylaws.html#338-cs-promotion-and-tenure-subcommittee"
  },"26": {
    "doc": "Department Bylaws",
    "title": "3.3.9 Other Standing Committees",
    "content": "The Department Chair may authorize other standing committees to carry out specific ongoing tasks. Their charge should be described in the PDC. ",
    "url": "/bylaws.html#339-other-standing-committees",
    
    "relUrl": "/bylaws.html#339-other-standing-committees"
  },"27": {
    "doc": "Department Bylaws",
    "title": "3.3.9 Ad Hoc Committees",
    "content": "The Department Chair may appoint ad hoc committees (which are not standing committees) to deal with matters that are not considered by standing committees or are delegated to the ad hoc committee by a standing committee. Their charge and term should be documented in an email and/or minutes to the faculty. ",
    "url": "/bylaws.html#339-ad-hoc-committees",
    
    "relUrl": "/bylaws.html#339-ad-hoc-committees"
  },"28": {
    "doc": "Department Bylaws",
    "title": "4. Faculty Meetings",
    "content": "General faculty meetings are those at which primary business of the Department is discussed and acted upon (except for consideration of appointment, renewal, promotion, or tenure of faculty, which requires certain subsets of the faculty). The Chair, or their designated representative, will preside at all faculty meetings. The term “faculty meeting” when used in these Bylaws refers to a general, unrestricted meeting of the regular Department faculty. It is the responsibility of voting faculty with primary appointments in Computer Science to attend faculty meetings. Non-voting faculty are encouraged to attend faculty meetings. At the discretion of the Chair, discussion and votes on personnel issues may be made in closed meeting sessions that are only open to voting faculty. All voting faculty, including those on sabbatical or on personal leave, may attend and participate in all faculty meetings. Other faculty and a representative of the graduate students will be invited to attend and participate in portions of faculty meetings as appropriate. The following Department policies are among those discussed and voted on at faculty meetings: . | undergraduate curriculum, policies, degree requirements and strategies, in consultation with the Undergraduate Committees | graduate curriculum, policies, degree requirements and strategies, in consultation with the Graduate Committee | funding policies for graduate students, in consultation with the Graduate Committee and Admissions and Financial Aid Committee, and | . Other items to be discussed, but generally not voted on, at faculty meetings include: . | general departmental policies and planning, and | faculty and graduate student recruitment strategies and priorities. | . ",
    "url": "/bylaws.html#4-faculty-meetings",
    
    "relUrl": "/bylaws.html#4-faculty-meetings"
  },"29": {
    "doc": "Department Bylaws",
    "title": "4.1 Schedule of Faculty Meetings",
    "content": "Whenever possible, the Chair schedules faculty meetings during the weekdays and at a time that minimizes conflicts with the teaching schedule of voting faculty members. There must be at least four faculty meetings called by the Chair for each Fall and Spring term. Other faculty meetings and meetings of subsets of the faculty are called by the Chair or the Chair’s designee upon four calendar days’ notice, except in the case of emergency meetings, which can be called with lesser notice. If three members of the Department faculty submit a written request and agenda for a faculty meeting, the Chair calls a meeting incorporating that agenda within one month. ",
    "url": "/bylaws.html#41-schedule-of-faculty-meetings",
    
    "relUrl": "/bylaws.html#41-schedule-of-faculty-meetings"
  },"30": {
    "doc": "Department Bylaws",
    "title": "4.2 Agenda",
    "content": "For faculty meetings and meetings of subsets of the faculty, the Chair or the Chair’s designee prepares the agenda and circulates it before each meeting. The agenda and draft motions are circulated at least four calendar days in advance of the meeting, except in the case of emergency meetings. Although other business may be discussed at the faculty meeting, official action may be taken only on items on the agenda. ",
    "url": "/bylaws.html#42-agenda",
    
    "relUrl": "/bylaws.html#42-agenda"
  },"31": {
    "doc": "Department Bylaws",
    "title": "4.3 Minutes",
    "content": "All decisions made at faculty meetings are recorded and distributed in minutes of the meetings. The minutes are confidential and their contents are not to be released in any manner for outside distribution, except with the approval of the faculty. The Chair may prepare the minutes or designate the preparer(s) of the minutes. The minutes of a faculty meeting are subject to revision by any faculty member by submission of corrections or elaborations. The amendments are appended verbatim to the draft of the minutes prior to the next faculty meeting. If no faculty member objects to the minutes or amendments by the beginning of the next faculty meeting, the minutes are then entered into the official record. A vote on the content of the minutes is taken only if requested and seconded by a voting faculty member. The minutes are filed electronically by the Chair’s Office and shall be available to regular faculty. ",
    "url": "/bylaws.html#43-minutes",
    
    "relUrl": "/bylaws.html#43-minutes"
  },"32": {
    "doc": "Department Bylaws",
    "title": "4.4 Voting and Proxies",
    "content": "For a motion to pass, a strict majority (one-half plus one) of the voting faculty must vote in the affirmative. The Department Chair is not counted in this majority, nor are those faculty members with secondary appointments and those who are on leave or sabbatical, unless they attend the meeting to vote or send a proxy or absentee vote (this provision is not meant to discourage participation of faculty with secondary appointments or those on leave or sabbatical, but rather to provide them with greater flexibility.) . A faculty member may also explicitly exclude themselves from the vote, and is then not counted toward the majority requirement. Those faculty members with voting privilege in the department unable to attend a meeting may submit absentee or proxy votes in advance of the start of the meeting as appropriate for a given agenda item and shall be counted as present for purpose of determining the strict majority. Unless otherwise stated, matters are settled by ordinary ballot (such as a show of hands or voice vote). Minor changes to the motions do not need another waiting period. Any eligible faculty member may request that a vote be taken by secret ballot (such as a written ballot), and that request shall be granted. Proxy votes allow members of the faculty to vote in meetings that they do not attend. Each proxy vote must be arranged in advance by agreement with another eligible member of the faculty (the delegate) and communicated in writing or by electronic mail to the chair. When the vote is taken, the delegate states publicly which absentee they are voting for; in an ordinary ballot the delegate then states the vote of the absentee, while in a secret ballot the delegate is given an extra ballot to fill out in behalf of the absentee. Proxy votes must be arranged independently for each issue and meeting. Proxy votes can be cast on modified motions as long as the delegate agrees. For a major change, the topic is carried to the next meeting. Absentee votes also allow members of the faculty to vote in meetings that they do not attend. Absentee votes differ from proxies, in that the absentee vote specifies a specific vote, while proxy votes are at the discretion of the individual carrying the proxy. Unless the agenda item to be voted upon is announced as urgent, faculty may submit absentee votes up to one business day (by 5pm) after the end of the faculty meeting. Topics not expected to be controversial can be recommended for an email or online vote. The motion and the recommendation for an email/online vote must be distributed five days in advance of the deadline for voting. A strict majority of the eligible faculty is still required for such a motion to pass. Proxies and secret ballots do not apply to email/online voting. Any faculty member may request the motion be discussed instead at a faculty meeting. The chair votes after the vote is counted and only does so if the vote of the chair could change the outcome of the vote. ",
    "url": "/bylaws.html#44-voting-and-proxies",
    
    "relUrl": "/bylaws.html#44-voting-and-proxies"
  },"33": {
    "doc": "Department Bylaws",
    "title": "5.  Communications and Notice",
    "content": "Electronic mail is a sufficient and appropriate notice for meetings of the Department. Faculty are expected to check their electronic mail at least every working day, while in residence. When the participants involved agree, electronic communications (e.g., email, Skype, conference call) may be used to present, discuss, and decide issues that would otherwise require a meeting. ",
    "url": "/bylaws.html#5--communications-and-notice",
    
    "relUrl": "/bylaws.html#5--communications-and-notice"
  },"34": {
    "doc": "Department Bylaws",
    "title": "6. Appointments, Promotions and Reappointments",
    "content": "6.1 Appointments . ",
    "url": "/bylaws.html#6-appointments-promotions-and-reappointments",
    
    "relUrl": "/bylaws.html#6-appointments-promotions-and-reappointments"
  },"35": {
    "doc": "Department Bylaws",
    "title": "6.1.1 Chair Appointment",
    "content": "A department chair may be appointed by the Dean in consultation with the Provost. In case of an external chair, a search committee is organized to recruit, evaluate, and recommend a set of candidates to the Dean, in consultation with the voting Faculty. In case of an internal candidate, the Dean appoints a committee, which solicits advice from each voting member of the regular faculty before making a recommendation to the Dean. An annual review of the Department Chair will be carried out by an ad-hoc committee consisting of all of the Full Professors in the Department, or according to other policies that may be promulgated by the School or University. ",
    "url": "/bylaws.html#611-chair-appointment",
    
    "relUrl": "/bylaws.html#611-chair-appointment"
  },"36": {
    "doc": "Department Bylaws",
    "title": "6.1.2 Associate Chair Appointment",
    "content": "Appointment of an Associate Chair is made by the Chair. The term of office is normally three or four years and is renewable. If the appointee has a term appointment, the appointment of Assistant or Associate Chair cannot extend beyond the end of a faculty member’s term. ",
    "url": "/bylaws.html#612-associate-chair-appointment",
    
    "relUrl": "/bylaws.html#612-associate-chair-appointment"
  },"37": {
    "doc": "Department Bylaws",
    "title": "6.1.3 Tenure-Track and Academic-General-Faculty Appointments",
    "content": "A Faculty Search Committee (ad hoc), appointed by the Chair, Dean, or Provost or their designees, is responsible for administering the recruitment of new tenure-track and non-tenure-track faculty. The Faculty Search Committee actively solicits the views of the voting faculty regarding the desired qualifications of candidates for open positions and formulates an advertisement to attract such candidates. The Faculty Search Committee reviews applications for the positions and identifies a set of finalists who are invited for full interviews. After each candidate’s visit, the Faculty Search Committee solicits evaluations from the voting faculty, appropriate non-voting faculty, and students, and uses these evaluations to formulate a recommendation that is presented to the voting faculty for discussion at a faculty meeting, with the Chair in attendance. Votes may be taken to indicate level of support, but these votes are advisory to the search committee and do not follow the quorum rules in Section 4.4. The search committee then makes a final recommendation to the Chair. The Department Chair makes the decision from the list of recommended candidates and presents their recommendations to the Dean. ",
    "url": "/bylaws.html#613-tenure-track-and-academic-general-faculty-appointments",
    
    "relUrl": "/bylaws.html#613-tenure-track-and-academic-general-faculty-appointments"
  },"38": {
    "doc": "Department Bylaws",
    "title": "6.1.4 Courtesy Faculty Appointments",
    "content": "A faculty member whose primary appointment is in another department may be considered for a courtesy appointment in Computer Science at any time. A recommendation for appointment requires an affirmative vote according to the voting rules in Section 4.4, and the approval of the Department Chair. If approved, the term is for up to three years and renewable with an affirmative vote according to the voting rules in Section 4.4. ",
    "url": "/bylaws.html#614-courtesy-faculty-appointments",
    
    "relUrl": "/bylaws.html#614-courtesy-faculty-appointments"
  },"39": {
    "doc": "Department Bylaws",
    "title": "6.1.5 Joint Appointments",
    "content": "A faculty member whose primary appointment is in another department may be considered for a secondary Joint Appointment in Computer Science at any time. Except in cases where a joint appointment is part of a hiring package, the recommendation to make such an appointment may not be voted on in the first meeting where it is discussed, meaning that each joint appointment will be considered at two or more meetings of the voting faculty. External letters may be requested but are not necessary. A recommendation for appointment requires an affirmative vote according to the voting rules in Section 4.4 and the approval of the Department Chair. If the Department recommends a Joint Appointment, the Chair reports the Department’s action to the Dean, and if the appointment is approved, the Dean writes a letter of appointment to the candidate. If approved, the term is for three years and renewable with an affirmative vote according to the voting rules in Section 4.4. Details of joint appointments will be covered by a departmental policy. ",
    "url": "/bylaws.html#615-joint-appointments",
    
    "relUrl": "/bylaws.html#615-joint-appointments"
  },"40": {
    "doc": "Department Bylaws",
    "title": "6.1.6 Professional Research Staff Appointments",
    "content": "The professor who will be responsible for the funding and management of the Professional Research Staff member recruits candidates and makes an offer, after written approval of the Department Chair. However, in accordance with SEAS and university guidelines, hiring a senior research professional staff member (Research Scientists, Senior Scientists, and Principle Scientists) requires a search committee. A Department Search Committee, composed of regular faculty and staff members, is appointed by the Chair. This Committee performs the overall evaluation and provides a written recommendation to the Chair. Subject to the approval of the professor who is responsible for funding and management, the chair submits their recommendation to the Dean. These appointments are for a specified term, typically from 1 to 3 years, renewable. See UVA Policy on Professional Research staff for more information. ",
    "url": "/bylaws.html#616-professional-research-staff-appointments",
    
    "relUrl": "/bylaws.html#616-professional-research-staff-appointments"
  },"41": {
    "doc": "Department Bylaws",
    "title": "6.2 Promotion, Reappointments and Tenure",
    "content": " ",
    "url": "/bylaws.html#62-promotion-reappointments-and-tenure",
    
    "relUrl": "/bylaws.html#62-promotion-reappointments-and-tenure"
  },"42": {
    "doc": "Department Bylaws",
    "title": "6.2.1 Chair Reappointment",
    "content": "The Chair is normally appointed for a four-year term. Renewal is possible after an evaluation performed by a committee appointed by the Dean. This committee solicits information from the Department about the Chair’s performance. The committee reports to the Dean, who makes the renewal decision. The Chair normally serves no more than two consecutive terms. ",
    "url": "/bylaws.html#621-chair-reappointment",
    
    "relUrl": "/bylaws.html#621-chair-reappointment"
  },"43": {
    "doc": "Department Bylaws",
    "title": "6.2.2 Tenure/Tenure-Track and Academic General Faculty Promotion, Reappointments and Tenure",
    "content": "The criteria and procedure for promotion are provided in the SEAS Promotion and Tenure Policy found at https://engineering.virginia.edu/faculty-staff/uva-engineering-policies-procedures . Reappointment and promotion are considered first by a Department Promotion and Tenure Subcommittee, appointed by the chair. This Subcommittee should have representation including both Tenured/Tenure-Track and Academic General Faculty and diverse research areas. The Department Chair may chair the Departmental Promotion and Tenure Subcommittee or may delegate this position to a tenured faculty member with a higher rank than the candidate. This Committee provides the Department Chair and all faculty members with a higher rank than the candidate (i.e., the full Departmental Promotion and Tenure Committee), who are eligible to vote on Promotion and Tenure matters, with a written evaluation of the performance of the candidate being considered for reappointment, promotion, and tenure. All of the faculty members with primary appointments (&gt;= 50%) in the department and with rank above that of the candidate vote in a secret ballot on the recommendation of the Committee. (For cases in which a full professor is being considered for hiring with tenure, the voting faculty will be full professors with primary appointments in the department.) . If a substantial portion of a candidate’s research is cross-disciplinary, appropriate members from other departments may be invited to provide input about the candidate. All deliberations for tenure, reappointment and promotion shall be kept confidential. It is serious breach of professional ethics for members to discuss the deliberations of the Department Promotion and Tenure Committee with non-members, especially regarding the individual candidate being considered. ",
    "url": "/bylaws.html#622-tenuretenure-track-and-academic-general-faculty-promotion-reappointments-and-tenure",
    
    "relUrl": "/bylaws.html#622-tenuretenure-track-and-academic-general-faculty-promotion-reappointments-and-tenure"
  },"44": {
    "doc": "Department Bylaws",
    "title": "7. Adoption",
    "content": "These Bylaws shall be adopted and shall be in full force and effect upon (1) approval by the voting faculty of the Department of Computer Science and the Department Chair, which shall require at least a two-thirds approval by the voting faculty, and the vote shall be by secret ballot; and (2) approval by the Dean of the School of Engineering and Applied Sciences. ",
    "url": "/bylaws.html#7-adoption",
    
    "relUrl": "/bylaws.html#7-adoption"
  },"45": {
    "doc": "Department Bylaws",
    "title": "7.1 Amendments",
    "content": "Any voting faculty member of the Department, or the Chair, may propose amendment of these Bylaws, in whole or in part, in accordance with the following procedure: . Upon receipt of a written amendment proposal, the Chair shall provide written notice to the voting faculty, containing the complete substance of the proposed amendment, at least two weeks in advance of a meeting at which the proposal is to be considered. The Amendment may be introduced as a Motion of Amendment to Bylaws Previously Adopted. Such a motion is debatable and can be amended. The proposed amendment may be adopted and shall be in full force and effect upon approval by a two-thirds approval vote of the voting faculty using a secret ballot. ",
    "url": "/bylaws.html#71-amendments",
    
    "relUrl": "/bylaws.html#71-amendments"
  },"46": {
    "doc": "Department Bylaws",
    "title": "Department Bylaws",
    "content": " ",
    "url": "/bylaws.html",
    
    "relUrl": "/bylaws.html"
  },"47": {
    "doc": "Contact",
    "title": "Contact Information",
    "content": ". | CS Mailings Lists | CS Department Contacts | SEAS Student Support Team | SDAC and Other Special Circumstances | . ",
    "url": "/contact.html#contact-information",
    
    "relUrl": "/contact.html#contact-information"
  },"48": {
    "doc": "Contact",
    "title": "CS Mailings Lists",
    "content": "NOTE: All addresses below are @virginia.edu. | cs-activefaculty: All current CS faculty, including joint and secondary appointments | . ",
    "url": "/contact.html#cs-mailings-lists",
    
    "relUrl": "/contact.html#cs-mailings-lists"
  },"49": {
    "doc": "Contact",
    "title": "CS Department Contacts",
    "content": ". | General questions and help: cs-office@virginia.edu | BSCS Director: bscsdirector@virginia.edu | BACS Director: bacsdirector@virginia.edu | CS Minor Director: csminordirector@virginia.edu | . ",
    "url": "/contact.html#cs-department-contacts",
    
    "relUrl": "/contact.html#cs-department-contacts"
  },"50": {
    "doc": "Contact",
    "title": "SEAS Student Support Team",
    "content": " ",
    "url": "/contact.html#seas-student-support-team",
    
    "relUrl": "/contact.html#seas-student-support-team"
  },"51": {
    "doc": "Contact",
    "title": "Learning",
    "content": ". | Lisa Lampe, Director of Undergraduate Education | Georgina Nembhard, Director of Undergraduate Success | Courtney MacMasters, Accessibility Specialist | Free tutoring is available for most classes | . ",
    "url": "/contact.html#learning",
    
    "relUrl": "/contact.html#learning"
  },"52": {
    "doc": "Contact",
    "title": "Health and Wellbeing",
    "content": ". | Assistant Dean of Students, Student Safety and Support | . ",
    "url": "/contact.html#health-and-wellbeing",
    
    "relUrl": "/contact.html#health-and-wellbeing"
  },"53": {
    "doc": "Contact",
    "title": "SDAC and Other Special Circumstances",
    "content": "Students with disabilities may wish to work with the Student Disability Access Center (SDAC) to discuss a range of options to removing barriers, including official accommodations. We are fortunate to have an SDAC advisor, Courtney MacMasters, physically located in Engineering. You may email her at cmacmasters@virginia.edu to schedule an appointment. For general questions please visit the SDAC website: sdac.studenthealth.virginia.edu. ",
    "url": "/contact.html#sdac-and-other-special-circumstances",
    
    "relUrl": "/contact.html#sdac-and-other-special-circumstances"
  },"54": {
    "doc": "Contact",
    "title": "Contact",
    "content": " ",
    "url": "/contact.html",
    
    "relUrl": "/contact.html"
  },"55": {
    "doc": "Home",
    "title": "UVA CS Department Policies and Procedures",
    "content": "Site Last Updated: Tuesday, May 14, 2024 . This website is maintained by the faculty and staff of the Department of Computer Science and is intended to be a resource for faculty and staff regarding the policy, procedures, and operations of the department. We work to keep this website as up-to-date as possible, but if there are any conflicts between this website and official resources provided by the University of Virginia (e.g., information from the Registrar’s Office, the official Academic Record, the Dean’s office, UVA HR, etc.), the official resources should be considered the authoritative source. Please report any discrepancies or suggestions for other content to sherriff@virginia.edu. ",
    "url": "/#uva-cs-department-policies-and-procedures",
    
    "relUrl": "/#uva-cs-department-policies-and-procedures"
  },"56": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"57": {
    "doc": "Undergraduate Program",
    "title": "Undergraduate Program",
    "content": " ",
    "url": "/ug.html",
    
    "relUrl": "/ug.html"
  },"58": {
    "doc": "Curriculum Policies",
    "title": "Undergraduate Curriculum Policies",
    "content": ". | 1. Modifying existing courses . | 1.1. Content/coverage | 1.2. Amount and timing of work | 1.3. Sections and delivery | . | 2. Designing new courses . | 2.1. Special Topics courses | 2.2. Independent study | . | 3. Timing and deadlines | . ",
    "url": "/ug_curriculum.html#undergraduate-curriculum-policies",
    
    "relUrl": "/ug_curriculum.html#undergraduate-curriculum-policies"
  },"59": {
    "doc": "Curriculum Policies",
    "title": "1. Modifying existing courses",
    "content": " ",
    "url": "/ug_curriculum.html#1-modifying-existing-courses",
    
    "relUrl": "/ug_curriculum.html#1-modifying-existing-courses"
  },"60": {
    "doc": "Curriculum Policies",
    "title": "1.1. Content/coverage",
    "content": "Course content may be constrained by: . | The official course description in the record | Topics required by courses that use this as a prerequisite | Topics required by accreditation | Topics required by one or more degree programs | Measures that must be assessed every semester for accreditation | Deduplication constraints between similar courses | Student development goals identified for foundation courses | . Not all courses have all of these constraints. Those they have are found in its Course Spec, maintained by the CS Undergraduate Curriculum Committee (UCC) at (insert link), or in the record if the course has no Course Spec. Changes to these constraints generally require approval by multiple bodies and are coordinated by the UCC. If the course has multiple instructors with a shared section of some kind (laboratory, final exam time, etc), either all instructors must agree to details of content and coverage, or a request to un-share those sections must be given to the department course scheduler at least a week prior to enrollment opening. Beyond these constraints, faculty can redesign their course content and coverage without formal approval. However, please be aware of possible overlap; if your change would cause your course to cover topics that might reasonably be considered in-scope for another course, please coordinate with faculty who have taught that other course over the past 3 years to ensure that students who take both courses will still receive two full courses of material. ",
    "url": "/ug_curriculum.html#11-contentcoverage",
    
    "relUrl": "/ug_curriculum.html#11-contentcoverage"
  },"61": {
    "doc": "Curriculum Policies",
    "title": "1.2. Amount and timing of work",
    "content": "All CS courses should be 3 credits, with the following exceptions: . | Some foundation courses may be 4 credits | Independent study courses are variable credits (1–3); this flexibility allows smaller exploratory projects or spreading a 3-credit project over two semesters. | Seminars and student-taught courses may be 1 credit | . A credit is defined by both the university (PROV-022) and federal government (34 CFR § 600.2) as at least 135 hours of student time, including all individual, group, and in-class learning, study, assessment, and other work. For CS, we recommend 135 hours as a target, not just a lower bound. While actual time will vary by student, if a course proves to be reliably above or below this target then content and associated student tasks should be adjusted to more accurately reflect this definition. Instructors should recognize that students are taking multiple courses and may need to balance when they do their course work accordingly. While some students may choose to do the bulk of their work near an assignment deadline, there should be no arbitrary structural reason (such as delayed release of assignment details or delayed coverage of relevant topical material) why they must do so. ",
    "url": "/ug_curriculum.html#12-amount-and-timing-of-work",
    
    "relUrl": "/ug_curriculum.html#12-amount-and-timing-of-work"
  },"62": {
    "doc": "Curriculum Policies",
    "title": "1.3. Sections and delivery",
    "content": "As a general rule, each credit hour should correspond to one contact hour per week, where a contact hour is defined as either 50 minutes of lecture or 75 minutes of laboratory. Fewer contact hours may be appropriate for independent study courses. The way that UVA schedules courses means that changes to lecture/lab balance have ramifications far beyond a single course, both in that semester and in semesters that follow. Because of this, requests to change the lecture/lab allocation of a course must be submitted to the UCC before the schedule is submitted; requests should include justification for the change and input from other instructors of the same course number (if applicable). In addition to Lectures and Laboratories, UVA has course codes for Studios, Discussions, Practica, and Seminars. CS has traditionally not used these, but requests to do so may be submitted to the UCC. ",
    "url": "/ug_curriculum.html#13-sections-and-delivery",
    
    "relUrl": "/ug_curriculum.html#13-sections-and-delivery"
  },"63": {
    "doc": "Curriculum Policies",
    "title": "2. Designing new courses",
    "content": "The UCC is responsible for evaluating the content of courses and meeting university-level policies on special topics courses. The chair is responsible for balancing and funding faculty workloads. The scheduler is responsible for ensuring that each semester an appropriate number of courses of each type are offered. All three need to agree before a course is scheduled, and approval by one does not guarantee approval by the others. The following describes only information related to the UCC’s responsibilities. ",
    "url": "/ug_curriculum.html#2-designing-new-courses",
    
    "relUrl": "/ug_curriculum.html#2-designing-new-courses"
  },"64": {
    "doc": "Curriculum Policies",
    "title": "2.1. Special Topics courses",
    "content": "These courses are pilots of potential new permanent course offerings. Substantially similar offerings of a special topics course may be offered up to three times; a fourth offering should occur under a new permanent course number. Each offering as a 3501 or 4501 must be submitted for approval before being scheduled, and each should move the course closer to a permanent listing. Courses may be given a permanent number after a few number of offerings if the course content is stable and multiple faculty members agree it should be offered regularly. | CS 1511: A course that is not a CS required or elective course and has no computing prerequisites. | CS 2501: A course that is not part of a computing major and has only Intro to Programming (and possibly some non-CS courses) as a prerequisite; or a pilot of a new foundation course. | CS 3501: A CS elective requiring one or more 2000-level CS courses as a prerequisite, and which introduce topics such that we might reasonably imagine having a second undergrad course following it or which students might benefit from having before taking other electives. | CS 4501: A CS elective requiring several 2000- and/or 3000-level CS courses as prerequisites which provides a reasonably complete undergrad-level understanding of a topic. | . Each offering of one of these courses must be approved by the UCC, even if a substantially similar offering occurred in the past, and will not be scheduled without such approval. The request may be made in any format, but should include . | Proposed course title. | Proposed course description to put into SIS and the university record. | Course prerequisites. Consider both CS and non-CS courses. If only a smaller subset of a requisite course’s content is needed, clarify which content (e.g. “APMA 3100 or MATH 3100 for the notion of conditional probability”). | A list of similar existing courses at UVA and how this course differs from them. This should include statements by both the new and existing course - instructors about how much overlap the courses have; the new instructor’s reading of others’ past materials alone is generally insufficient. | . If this is a second or third offering, . | a detailed topics list | example assignments from previous offerings | if applicable, a summary of major changes planned for this offering | . If this is a third offering, . | a proposed permanent course number | a set of faculty who have reviewed the course materials and agreed they would be willing to teach a variant of the course in the future | Or, if the course is not ready for a permanent number and listing in the record, instead provide an explanation as to why not. | . Courses intended to be taken by majors (CS 3501 and CS 4501) must be both (a) substantially distinct from other offerings and (b) primarily computing content. Cross-departmental courses are appropriate only when the content is in the intersection of the two disciplines. Courses intended to be taken by non-majors (CS 1511 and CS 2501) have more flexibility; for example, they may . | extract certain practical topics from majors courses and present them without the supporting details needed to make them part of a CS degree | cover CS-adjacent topics | teach material in other courses through the lens of a specific non-computing discipline. | . Funding to support faculty time on non-majors courses is handled on a case-by-case basis and should be discussed with the department chair before submitting the course description to the UCC. There is also a special-topics course number, CS 1501, used only for 1-credit ungraded courses. In most cases, these are taught by students under the supervision of a faculty member. CS 1501 courses do not require UCC approval. ",
    "url": "/ug_curriculum.html#21-special-topics-courses",
    
    "relUrl": "/ug_curriculum.html#21-special-topics-courses"
  },"65": {
    "doc": "Curriculum Policies",
    "title": "2.2. Independent study",
    "content": "These courses are one-off offerings tailored to specific students. In general, they may consist of . | Instruction in topics not of general interest. | Supervised research, in which the primary goal is the student performing or assisting in a research project. | Supervised project work, in which the primary goal is the student creating or assisting in the creation of a significant artifact. | . They do not require approval as long as they both (a) have small enrollments and (b) are offered by a CS faculty member. They are not counted toward a faculty member’s overall teaching load. | CS 2993: Should have limited prereqs and deal in less advanced material than a typical computing elective. | CS 4980: Should be research or project work; instruction-oriented content is not appropriate for 4980. | CS 4993: Should be at least as advanced as a typical computing elective. | . Instructors of independent study courses should clearly specify their expectations in writing to students early in the term (a week before the drop deadline at a minimum) and should grade them based on those expectations. It is appropriate to mix and match independent study sections with other sections. For example, the following are appropriate: . | Having a group of undergraduates working on a project, some for 4993, some for 4980, and some as an uncredited side project | Having an undergrad in CS 4993 attend a graduate course as their primary learning activity | . ",
    "url": "/ug_curriculum.html#22-independent-study",
    
    "relUrl": "/ug_curriculum.html#22-independent-study"
  },"66": {
    "doc": "Curriculum Policies",
    "title": "3. Timing and deadlines",
    "content": "The following table summarizes when various events related to courses occur each year. | Activity | Fall | Spring | Summer | . | Chair approval of intent1 | December | April | October | . | First draft schedule | Dec 10 | Apr 1 | Oct 15 | . | Course proposal to UCC2 | penult Fri of Jan | penult Fri of Aug | penult Wed of Oct | . | Schedule due | 1st Fri of Feb | 1st Fri of Sep | 1st Wed of Nov | . | Schedule published3 | near March 15 | near Oct 15 | February | . | Courses start4 | near Aug 25 | near Jan 15 | varies | . | Add deadline4 | near Sep 5 | near Jan 30 | varies | . | Drop deadline4 | near Oct 15 | near Feb 25 | varies | . 1 The department chair handles issues of effort allocation, course offering balancing, and funding. Before investing energy in course (re)design, please verify that the chair supports the effort investment of a new/redesigned course. Note that chair approval does not guarantee UCC approval nor inclusion in any particular semester’s schedule. 2 The UCC needs to approve new and repeated 1511, 2501, 3501, and 4501 offerings. Submit your request by email to the UCC chair no later than 2 weeks before the schedule is due to allow time for discussion. Changes to lecture/lab allocations should be made at the same time. 3 You should have student-facing materials (a website, etc) for your new course available before the schedule is published to help students plan their course selection. 4 You should clarify the expectations of an independent study course before courses start if possible, or by the add deadline if you need to meet with the students first. You must provide the outcomes you will be grading to students before the drop deadline at the latest. ",
    "url": "/ug_curriculum.html#3-timing-and-deadlines",
    
    "relUrl": "/ug_curriculum.html#3-timing-and-deadlines"
  },"67": {
    "doc": "Curriculum Policies",
    "title": "Curriculum Policies",
    "content": " ",
    "url": "/ug_curriculum.html",
    
    "relUrl": "/ug_curriculum.html"
  },"68": {
    "doc": "Course Specifications",
    "title": "Undergraduate Course Specifications",
    "content": ". | Foundation Courses | Elective Courses | Service Courses | . ",
    "url": "/ug_specifications.html#undergraduate-course-specifications",
    
    "relUrl": "/ug_specifications.html#undergraduate-course-specifications"
  },"69": {
    "doc": "Course Specifications",
    "title": "Foundation Courses",
    "content": " ",
    "url": "/ug_specifications.html#foundation-courses",
    
    "relUrl": "/ug_specifications.html#foundation-courses"
  },"70": {
    "doc": "Course Specifications",
    "title": "CS 1110: Introduction to Programming",
    "content": "Foundation . (3 credits / Prerequisites: None) A first course in programming, software development, and computer science. Introduces computing fundamentals and an appreciation for computational thinking. No previous programming experience required. Note: CS 1110, 1111, 1112, 1113, and 1120 provide different approaches to teaching the same core material; students may only receive credit for one of these courses. Full Course Specification . ",
    "url": "/ug_specifications.html#cs-1110-introduction-to-programming",
    
    "relUrl": "/ug_specifications.html#cs-1110-introduction-to-programming"
  },"71": {
    "doc": "Course Specifications",
    "title": "CS 1111: Introduction to Programming",
    "content": "Foundation . (3 credits / Prerequisites: None) A first course in programming, software development, and computer science. Introduces computing fundamentals and an appreciation for computational thinking. Prerequisite: Students should have some experience with programming. Note: CS 1110, 1111, 1112, 1113, and 1120 provide different approaches to teaching the same core material; students may only receive credit for one of these courses. Full Course Specification . ",
    "url": "/ug_specifications.html#cs-1111-introduction-to-programming",
    
    "relUrl": "/ug_specifications.html#cs-1111-introduction-to-programming"
  },"72": {
    "doc": "Course Specifications",
    "title": "CS 1112: Introduction to Programming",
    "content": "Foundation . (3 credits / Prerequisites: None) A first course in programming, software development, and computer science. Introduces computing fundamentals and an appreciation for computational thinking. Prerequisite: Students must have no previous programming experience. Note: CS 1110, 1111, 1112, 1113, and 1120 provide different approaches to teaching the same core material; students may only receive credit for one of these courses. Full Course Specification . ",
    "url": "/ug_specifications.html#cs-1112-introduction-to-programming",
    
    "relUrl": "/ug_specifications.html#cs-1112-introduction-to-programming"
  },"73": {
    "doc": "Course Specifications",
    "title": "CS 1113: Introduction to Programming",
    "content": "Foundation . (3 credits / Prerequisites: None) A first course in programming, software development, and computer science. Introduces computing fundamentals and an appreciation for computational thinking. Special domain topics and materials will differ by section and semester. Note: CS 1110, 1111, 1112, 1113, and 1120 provide different approaches to teaching the same core material; students may only receive credit for one of these courses. Full Course Specification . ",
    "url": "/ug_specifications.html#cs-1113-introduction-to-programming",
    
    "relUrl": "/ug_specifications.html#cs-1113-introduction-to-programming"
  },"74": {
    "doc": "Course Specifications",
    "title": "CS 1120: Introduction to Computing: Explorations in Language, Logic, and Machines",
    "content": "Foundation . (3 credits / Prerequisites: None) This course is an introduction to the most important ideas in computing. It focuses on the big ideas in computer science including the major themes of recursive definitions, universality, and abstraction. It covers how to describe information processes by defining procedures using the Scheme and Python programming languages, how to analyze the costs required to carry out a procedure, and the fundamental limits of what can be computed. ",
    "url": "/ug_specifications.html#cs-1120-introduction-to-computing-explorations-in-language-logic-and-machines",
    
    "relUrl": "/ug_specifications.html#cs-1120-introduction-to-computing-explorations-in-language-logic-and-machines"
  },"75": {
    "doc": "Course Specifications",
    "title": "CS 2100: Data Structures and Algorithms 1",
    "content": "Foundation . (4 credits / Prerequisites: CS 1110, 1111, 1112, 1113, or 1120 with a grade of C- or higher; or the CS 1110 placement test.) A second course in computing with an emphasis on foundational data structures and program analysis. The course provides a introduction to object oriented programming and the Java programming language, concurrency, and inheritance / polymorphism. Additionally, foundational data structures and related algorithms / analysis are studied. These include lists, stacks, queues, trees, hash tables, and priority queues. ",
    "url": "/ug_specifications.html#cs-2100-data-structures-and-algorithms-1",
    
    "relUrl": "/ug_specifications.html#cs-2100-data-structures-and-algorithms-1"
  },"76": {
    "doc": "Course Specifications",
    "title": "CS 2120: Discrete Mathematics and Theory 1",
    "content": "Foundation . (3 credits / Prerequisites: CS 1110, 1111, 1112, 1113, or 1120 with a grade of C- or higher; or the CS 1110 placement test.) Introduces discrete mathematics and proof techniques involving first order predicate logic and induction. Application areas include sets, tuples, functions, relations, and combinatorial problems. ",
    "url": "/ug_specifications.html#cs-2120-discrete-mathematics-and-theory-1",
    
    "relUrl": "/ug_specifications.html#cs-2120-discrete-mathematics-and-theory-1"
  },"77": {
    "doc": "Course Specifications",
    "title": "CS 2130: Computer Systems and Organization 1",
    "content": "Foundation . (4 credits / Prerequisites: CS 1110, 1111, 1112, 1113, or 1120 with a grade of C- or higher; or the CS 1110 placement test AND either familiarity with Java, C++, or another C-like language, or concurrent enrollment in CS 2100) This course covers topics on the computer architecture abstraction hierarchy ranging from a step above silicon to a step below modern programming languages. Students in this course will learn to write low-level code in C and Assembly, how data is stored in memory, the basics of hardware design from gates and registers through general-purpose computers, and legal, ethical, and security issues related to these topics. Full Course Specification . ",
    "url": "/ug_specifications.html#cs-2130-computer-systems-and-organization-1",
    
    "relUrl": "/ug_specifications.html#cs-2130-computer-systems-and-organization-1"
  },"78": {
    "doc": "Course Specifications",
    "title": "CS 3100: Data Structures and Algorithms 2",
    "content": "Foundation . (3 credits / Prerequisites: CS 2150 or (CS 2100 &amp; CS 2120); APMA 1090 or MATH 1210 or MATH 1310 or equivalent) Builds upon previous analysis of algorithms and the effects of data structures on them. Algorithms selected from areas such as searching, shortest paths, greedy algorithms, backtracking, divide-and-conquer, dynamic programming, and machine learning. Analysis techniques include asymptotic worst case, expected time, amortized analysis, and reductions. ",
    "url": "/ug_specifications.html#cs-3100-data-structures-and-algorithms-2",
    
    "relUrl": "/ug_specifications.html#cs-3100-data-structures-and-algorithms-2"
  },"79": {
    "doc": "Course Specifications",
    "title": "CS 3120: Discrete Mathematics and Theory 2",
    "content": "Foundation . (3 credits / Prerequisites: CS 4102 or CS 3100 with a grade of C- or better) The goal of this course is to understand the fundamental limits on what can be efficiently computed. These limits reveal properties about information, communication, and computing, as well as practical issues about how to solve problems. Introduces computation theory including grammars, automata, and Turing machines. ",
    "url": "/ug_specifications.html#cs-3120-discrete-mathematics-and-theory-2",
    
    "relUrl": "/ug_specifications.html#cs-3120-discrete-mathematics-and-theory-2"
  },"80": {
    "doc": "Course Specifications",
    "title": "CS 3130: Computer Systems and Organization 2",
    "content": "Foundation . (4 credits / Prerequisites: CS 2100 and CS 2130 with a grade of C- or better) A second course in computer systems, this course will explore a more realistic model of processors and how they and the operating system work together to provide various functionality we depend on as application programmers. Course topics include permission models, system architecture, concurrency, virtual memory, cryptographic primitives, and TCP/IP networking. ",
    "url": "/ug_specifications.html#cs-3130-computer-systems-and-organization-2",
    
    "relUrl": "/ug_specifications.html#cs-3130-computer-systems-and-organization-2"
  },"81": {
    "doc": "Course Specifications",
    "title": "CS 3140: Software Development Essentials",
    "content": "Foundation . (3 credits / Prerequisites: CS 2100 with a C- or better.) A first course in software engineering and software construction, this course focuses on bringing the programming concepts learned in a first course in data structures and algorithms together to begin to teach students how to build more complex systems. The course covers introductory topics in testing, software design principles, design patterns, functional programming, and data storage and manipulation. Full Course Specification . ",
    "url": "/ug_specifications.html#cs-3140-software-development-essentials",
    
    "relUrl": "/ug_specifications.html#cs-3140-software-development-essentials"
  },"82": {
    "doc": "Course Specifications",
    "title": "CS 3240: Software Engineering",
    "content": "Foundation . (3 credits / Prerequisites: CS 2150 or CS 3140 with a grade of C- or better) Analyzes modern software engineering practice for multi-person projects; methods for requirements specification, design, implementation, verification, and maintenance of large software systems; advanced software development techniques and large project management approaches; project planning, scheduling, resource management, accounting, configuration control, and documentation. Formerly known as Advanced Software Development Techniques. ",
    "url": "/ug_specifications.html#cs-3240-software-engineering",
    
    "relUrl": "/ug_specifications.html#cs-3240-software-engineering"
  },"83": {
    "doc": "Course Specifications",
    "title": "Elective Courses",
    "content": " ",
    "url": "/ug_specifications.html#elective-courses",
    
    "relUrl": "/ug_specifications.html#elective-courses"
  },"84": {
    "doc": "Course Specifications",
    "title": "CS 3205: HCI in Software Development",
    "content": "Elective . (3 credits / Prerequisites: CS 2110 or CS 2100 with a grade of C- or better) Human-computer interaction and user-centered design in the context of software engineering. Examines the fundamental principles of human-computer interaction. Includes evaluating a system’s usability based on well-defined criteria; user and task analysis, as well as conceptual models and metaphors; the use of prototyping for evaluating design alternatives; and physical design of software user-interfaces, including windows, menus, and commands. ",
    "url": "/ug_specifications.html#cs-3205-hci-in-software-development",
    
    "relUrl": "/ug_specifications.html#cs-3205-hci-in-software-development"
  },"85": {
    "doc": "Course Specifications",
    "title": "CS 3250: Software Testing",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or (CS 2100 and CS 2120) with a grade of C- or better) An introduction to testing for assuring software quality. Covers concepts and techniques for testing software, including testing at the unit, module, subsystem, and system levels; automatic and manual techniques for generating and validating test data; the testing process; static vs. dynamic analysis; functional testing; inspections; testing in specific application domains; and reliability assessment. ",
    "url": "/ug_specifications.html#cs-3250-software-testing",
    
    "relUrl": "/ug_specifications.html#cs-3250-software-testing"
  },"86": {
    "doc": "Course Specifications",
    "title": "CS 3501: Special Topics in Computer Science",
    "content": "Elective . (1 - 3 credits / Prerequisites: Instructor permission; additional specific requirements vary with topics.) Content varies, depending on instructor interests and the needs of the Department. Taught strictly at the undergraduate level. ",
    "url": "/ug_specifications.html#cs-3501-special-topics-in-computer-science",
    
    "relUrl": "/ug_specifications.html#cs-3501-special-topics-in-computer-science"
  },"87": {
    "doc": "Course Specifications",
    "title": "CS 3710: Introduction to Cybersecurity",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or (CS 2100 or CS 2100 place-out test and CS 2130) with a grade of C- or better) Introduces students to the fields of cybersecurity. Both non-technical issues, such as ethics and policy, and technical issues are covered. Students see and experiment with a wide range of areas within cybersecurity, including: binary exploitation, encryption, digital forensics, networks, and modern threats. ",
    "url": "/ug_specifications.html#cs-3710-introduction-to-cybersecurity",
    
    "relUrl": "/ug_specifications.html#cs-3710-introduction-to-cybersecurity"
  },"88": {
    "doc": "Course Specifications",
    "title": "CS 4240: Principles of Software Design",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or CS 3140 with a grade of C- or better) Focuses on techniques for software design in the development of large and complex software systems. Topics will include software architecture, modeling (including UML), object-oriented design patterns, and processes for carrying out analysis and design. More advanced or recent developments may be included at the instructor’s discretion. The course will balance an emphasis on design principles with an understanding of how to apply techniques and methods to create successful software systems. ",
    "url": "/ug_specifications.html#cs-4240-principles-of-software-design",
    
    "relUrl": "/ug_specifications.html#cs-4240-principles-of-software-design"
  },"89": {
    "doc": "Course Specifications",
    "title": "CS 4260: Internet Scale Applications",
    "content": "Elective . (3 credits / Prerequisites: CS 3240 with a grade of C- or better) A survey of methods for building large-scale internet websites and mobile apps, with a focus on how theory meets practice. Topics covered include performance engineering, scaling, security, and large team software engineering. Results in students building a working scalable online application. ",
    "url": "/ug_specifications.html#cs-4260-internet-scale-applications",
    
    "relUrl": "/ug_specifications.html#cs-4260-internet-scale-applications"
  },"90": {
    "doc": "Course Specifications",
    "title": "CS 4434: Dependable Computing Systems",
    "content": "Elective . (3 credits / Prerequisites: CS 3330 or CS 2501 topic \"COA 2\" or ECE 3430 or ECE 4435 or ECE 3502 topic \"ECR II\" or CS 3130 and CS 3140; APMA 3100, APMA 3110, MATH 3100, or equivalent. Must complete CS courses with a grade of C- or better.) Focuses on techniques for designing &amp; analyzing dependable computer-based systems. Topics include basic dependability concepts &amp; attributes, fault models &amp; effects, combinatorial &amp; state-space modeling, hardware redundancy, error detecting &amp; correcting codes, time redundancy, software fault tolerance, checkpointing &amp; recovery, reliable networked systems, error detection techniques, &amp; experimental dependability evaluation techniques. ",
    "url": "/ug_specifications.html#cs-4434-dependable-computing-systems",
    
    "relUrl": "/ug_specifications.html#cs-4434-dependable-computing-systems"
  },"91": {
    "doc": "Course Specifications",
    "title": "CS 4444: Introduction to Parallel Computing",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 and CS 3330 or CS 2501 topic \"COA 2\" or ECE 3430 or ECE 4435 or ECE 3502 topic \"ECR II\" or CS 3100 and CS 3130. Must complete CS courses with a grade of C- or better.) Introduces the student to the basics of high-performance parallel computing and the national cyber-infrastructure. The course is targeted for both computer science students and students from other disciplines who want to learn how to significantly increase the performance of applications. ",
    "url": "/ug_specifications.html#cs-4444-introduction-to-parallel-computing",
    
    "relUrl": "/ug_specifications.html#cs-4444-introduction-to-parallel-computing"
  },"92": {
    "doc": "Course Specifications",
    "title": "CS 4457: Computer Networks",
    "content": "Elective . (3 credits / Prerequisites: CS 3330 or CS 2501 topic \"COA 2\" or ECE 3430 or ECE 4435 or ECE 3502 topic \"ECR II\" or CS 3130. Must complete CS courses with a grade of C- or better.) A first course in communication networks for upper-level undergraduate students. Topics include the design of modern communication networks; point-to-point and broadcast network solutions; advanced issues such as Gigabit networks; ATM networks; and real-time communications. Cross-listed as ECE 4457. ",
    "url": "/ug_specifications.html#cs-4457-computer-networks",
    
    "relUrl": "/ug_specifications.html#cs-4457-computer-networks"
  },"93": {
    "doc": "Course Specifications",
    "title": "CS 4458: Internet Engineering",
    "content": "Elective . (3 credits / Prerequisites: CS 4457 with a grade of C- or better.) An advanced course on computer networks on the technologies and protocols of the Internet. Topics include the design principles of the Internet protocols, including TCP/IP, the Domain Name System, routing protocols, and network management protocols. A set of laboratory exercises covers aspects of traffic engineering in a wide-area network. ",
    "url": "/ug_specifications.html#cs-4458-internet-engineering",
    
    "relUrl": "/ug_specifications.html#cs-4458-internet-engineering"
  },"94": {
    "doc": "Course Specifications",
    "title": "CS 4501: Special Topics in Computer Science",
    "content": "Elective . (1 - 3 credits / Prerequisites: Instructor permission; additional specific requirements vary with topics.) Content varies annually, depending on instructor interests and the needs of the department. Similar to CS 5501 and CS 7501, but taught strictly at the undergraduate level. ",
    "url": "/ug_specifications.html#cs-4501-special-topics-in-computer-science",
    
    "relUrl": "/ug_specifications.html#cs-4501-special-topics-in-computer-science"
  },"95": {
    "doc": "Course Specifications",
    "title": "CS 4610: Programming Languages",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or (CS 2120 and 3140) with a grade of C- or better) Presents the fundamental concepts of programming language design and implementation. Emphasizes language paradigms and implementation issues. Develops working programs in languages representing different language paradigms. Many programs oriented toward language implementation issues. ",
    "url": "/ug_specifications.html#cs-4610-programming-languages",
    
    "relUrl": "/ug_specifications.html#cs-4610-programming-languages"
  },"96": {
    "doc": "Course Specifications",
    "title": "CS 4620: Compilers",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or (CS 2120 and 3140) with a grade of C- or better) Provides an introduction to the field of compilers, which translate programs written in high-level languages to a form that can be executed. The course covers the theories and mechanisms of compilation tools. Students will learn the core ideas behind compilation and how to use software tools such as lex/flex, yacc/bison to build a compiler for a non-trivial programming language. ",
    "url": "/ug_specifications.html#cs-4620-compilers",
    
    "relUrl": "/ug_specifications.html#cs-4620-compilers"
  },"97": {
    "doc": "Course Specifications",
    "title": "CS 4630: Defense Against the Dark Arts",
    "content": "Elective . (3 credits / Prerequisites: CS 3710 with a grade of C- or better) Viruses, worms, and other malicious software are an ever-increasing threat to computer systems. There is an escalating battle between computer security specialists and the designers of malicious software. This course provides an essential understanding of the techniques used by both sides of the computer security battle. ",
    "url": "/ug_specifications.html#cs-4630-defense-against-the-dark-arts",
    
    "relUrl": "/ug_specifications.html#cs-4630-defense-against-the-dark-arts"
  },"98": {
    "doc": "Course Specifications",
    "title": "CS 4640: Programming Languages for Web Applications",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or CS 3140 with a grade of C- or better) Presents programming languages and implementations used in developing web applications. Both client and server side languages are presented as well as database languages. In addition, frameworks that enable interactive web pages are discussed as well as formatting languages. Language features and efficiencies including scoping, parameter passing, object orientation, just in time compilation and dynamic binary translation are included. ",
    "url": "/ug_specifications.html#cs-4640-programming-languages-for-web-applications",
    
    "relUrl": "/ug_specifications.html#cs-4640-programming-languages-for-web-applications"
  },"99": {
    "doc": "Course Specifications",
    "title": "CS 4710: Artificial Intelligence",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or CS 3100 with a grade of C- or better) Introduces artificial intelligence. Covers fundamental concepts and techniques and surveys selected application areas. Core material includes state space search, logic, and resolution theorem proving. Application areas may include expert systems, natural language understanding, planning, machine learning, or machine perception. Provides exposure to AI implementation methods, emphasizing programming in Common LISP. ",
    "url": "/ug_specifications.html#cs-4710-artificial-intelligence",
    
    "relUrl": "/ug_specifications.html#cs-4710-artificial-intelligence"
  },"100": {
    "doc": "Course Specifications",
    "title": "CS 4720: Mobile Application Development",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or CS 3140 with a grade of C- or better) Mobile computing devices have become ubiquitous in our communities. In this course, we focus on the creation of mobile solutions for various modern platforms, including major mobile operating systems. Topics include mobile device architecture, programming languages, software engineering, user interface design, and app distribution. ",
    "url": "/ug_specifications.html#cs-4720-mobile-application-development",
    
    "relUrl": "/ug_specifications.html#cs-4720-mobile-application-development"
  },"101": {
    "doc": "Course Specifications",
    "title": "CS 4730: Computer Game Design",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or CS 3140 with a grade of C- or better) This course will introduce students to the concepts and tools used in the development of modern 2-D and 3-D real-time interactive computer video games. Topics covered in this include graphics, parallel processing, human-computer interaction, networking, artificial intelligence, and software engineering. ",
    "url": "/ug_specifications.html#cs-4730-computer-game-design",
    
    "relUrl": "/ug_specifications.html#cs-4730-computer-game-design"
  },"102": {
    "doc": "Course Specifications",
    "title": "CS 4740: Cloud Computing",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or CS 3140 with a grade of C- or better) Investigates the architectural foundations of the various cloud platforms, as well as examining both current cloud computing platforms and modern cloud research. Student assignments utilize the major cloud platforms. ",
    "url": "/ug_specifications.html#cs-4740-cloud-computing",
    
    "relUrl": "/ug_specifications.html#cs-4740-cloud-computing"
  },"103": {
    "doc": "Course Specifications",
    "title": "CS 4750: Database Systems",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or (CS 2120 and 3140) with a grade of C- or better) Introduces the fundamental concepts for design and development of database systems. Emphasizes relational data model and conceptual schema design using ER model, practical issues in commercial database systems, database design using functional dependencies, and other data models. Develops a working relational database for a realistic application. ",
    "url": "/ug_specifications.html#cs-4750-database-systems",
    
    "relUrl": "/ug_specifications.html#cs-4750-database-systems"
  },"104": {
    "doc": "Course Specifications",
    "title": "CS 4753: Electronic Commerce Technologies",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or CS 3140 with a grade of C- or better) History of Internet and electronic commerce on the web; case studies of success and failure; cryptographic techniques for privacy, security, and authentication; digital money; transaction processing; wired and wireless access technologies; Java; streaming multimedia; XML; Bluetooth. Defining, protecting, growing, and raising capital for an e-business. ",
    "url": "/ug_specifications.html#cs-4753-electronic-commerce-technologies",
    
    "relUrl": "/ug_specifications.html#cs-4753-electronic-commerce-technologies"
  },"105": {
    "doc": "Course Specifications",
    "title": "CS 4760: Network Security",
    "content": "Elective . (3 credits / Prerequisites: CS 3710 with a grade of C- or better) This course covers the principles of secure network communications and the application of network security. Topics include: attack types, attack surfaces, attack phases, network security devices.(a)symmetric key encryption, cryptographic hash function, authentication/identification techniques, key distribution, and data integrity assurance. Also, currently used security mechanisms and protocols will be discussed. ",
    "url": "/ug_specifications.html#cs-4760-network-security",
    
    "relUrl": "/ug_specifications.html#cs-4760-network-security"
  },"106": {
    "doc": "Course Specifications",
    "title": "CS 4774: Machine Learning",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or CS 3100 with a grade of C- or better; APMA 3100, APMA 3110, MATH 3100, or equivalent and Math 3350 or APMA 3080 or equivalent) An introduction to machine learning: the study of algorithms that improve their performance through experience. Covers both machine learning theory and algorithms. Introduces algorithms, theory, and applications related to both supervised and unsupervised learning, including regression, classification, and optimization and major algorithm families for each. ",
    "url": "/ug_specifications.html#cs-4774-machine-learning",
    
    "relUrl": "/ug_specifications.html#cs-4774-machine-learning"
  },"107": {
    "doc": "Course Specifications",
    "title": "CS 4780: Information Retrieval",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or CS 3100 with a grade of C- or better; APMA 3100, APMA 3110, MATH 3100, or equivalent) An introduction to modern information retrieval technologies. Topics include indexing, query processing, document ranking, query recommendation, personalization, and other current topics in information retrieval. Students develop a custom search engine as part of this course. ",
    "url": "/ug_specifications.html#cs-4780-information-retrieval",
    
    "relUrl": "/ug_specifications.html#cs-4780-information-retrieval"
  },"108": {
    "doc": "Course Specifications",
    "title": "CS 4810: Introduction to Computer Graphics",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or (CS 3100 and 3130) with a grade of C- or better) Introduces the fundamentals of three-dimensional computer graphics: rendering, modeling, and animation. Students learn how to represent three-dimensional objects (modeling) and the movement of those objects over time (animation). Students learn and implement the standard rendering pipeline, defined as the stages of turning a three-dimensional model into a shaded, lit, texture-mapped two-dimensional image. ",
    "url": "/ug_specifications.html#cs-4810-introduction-to-computer-graphics",
    
    "relUrl": "/ug_specifications.html#cs-4810-introduction-to-computer-graphics"
  },"109": {
    "doc": "Course Specifications",
    "title": "CS 4970: Capstone Practicum I",
    "content": "Elective . (3 credits / Prerequisites: CS 2150 or CS 2501 topic DSA2 with a grade of C- or higher, and BSCS major) This course is one option in the CS fourth-year thesis track. Under the practicum track, students will take two 3-credit courses, CS 4970 and CS 4971. These courses would form a year-long group-based and project-based practicum class. There would be an actual customer, which could be either internal (the course instructor, other CS professors, etc.) or external (local companies, local non-profits, etc.). ",
    "url": "/ug_specifications.html#cs-4970-capstone-practicum-i",
    
    "relUrl": "/ug_specifications.html#cs-4970-capstone-practicum-i"
  },"110": {
    "doc": "Course Specifications",
    "title": "CS 4993: Independent Study",
    "content": "Elective . (1 - 3 credits / Prerequisites: Instructor permission.) In-depth study of a computer science or computer engineering problem by an individual student in close consultation with departmental faculty. The study is often either a thorough analysis of an abstract computer science problem or the design, implementation, and analysis of a computer system (software or hardware). ",
    "url": "/ug_specifications.html#cs-4993-independent-study",
    
    "relUrl": "/ug_specifications.html#cs-4993-independent-study"
  },"111": {
    "doc": "Course Specifications",
    "title": "Service Courses",
    "content": " ",
    "url": "/ug_specifications.html#service-courses",
    
    "relUrl": "/ug_specifications.html#service-courses"
  },"112": {
    "doc": "Course Specifications",
    "title": "CS 1010: Introduction to Information Technology",
    "content": "Service . (3 credits / Prerequisites: None) How computers create, preserve, manipulate and communicate information and the concepts and tools used to that end. Units include how computers work, web technologies, creating web pages, algorithms and logic, basic programming, and solving problems with spreadsheets. Students will learn to recognize computational problems and develop basic skill sets to solve future problems in their discipline of study. No prior programming experience required. Cannot be taken for credit by students in SEAS. ",
    "url": "/ug_specifications.html#cs-1010-introduction-to-information-technology",
    
    "relUrl": "/ug_specifications.html#cs-1010-introduction-to-information-technology"
  },"113": {
    "doc": "Course Specifications",
    "title": "Course Specifications",
    "content": " ",
    "url": "/ug_specifications.html",
    
    "relUrl": "/ug_specifications.html"
  }
}
